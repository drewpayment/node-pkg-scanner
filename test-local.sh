#!/bin/bash

set -e

echo "🧪 Shai Hulud Detector - Local Testing Script"
echo "=============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_step() {
    echo -e "${BLUE}📋 $1${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if we're in the right directory
if [ ! -f "package.json" ]; then
    print_error "package.json not found. Please run this script from the project root."
    exit 1
fi

# Step 1: Install dependencies and build
print_step "Installing dependencies and building..."
bun install
bun run build
print_success "Build completed"

# Step 2: Create test projects
print_step "Creating test projects..."

# Clean up existing test directories
rm -rf test-projects
mkdir -p test-projects

# Test project 1: npm with compromised packages
mkdir -p test-projects/compromised-npm
cat > test-projects/compromised-npm/package.json << 'EOF'
{
  "name": "test-compromised-npm",
  "version": "1.0.0",
  "dependencies": {
    "express": "^4.18.2",
    "cr0wdstrike-fix": "^1.0.0",
    "crowdstrike-update": "^2.1.0",
    "lodash": "^4.17.21"
  },
  "devDependencies": {
    "crowdstrik-update": "^1.5.0"
  }
}
EOF

# Test project 2: yarn with compromised packages
mkdir -p test-projects/compromised-yarn
cat > test-projects/compromised-yarn/package.json << 'EOF'
{
  "name": "test-compromised-yarn",
  "version": "1.0.0",
  "dependencies": {
    "react": "^18.2.0",
    "croudstrike-fix": "^1.2.0"
  }
}
EOF

cat > test-projects/compromised-yarn/yarn.lock << 'EOF'
# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

croudstrike-fix@^1.2.0:
  version "1.2.0"
  resolved "https://registry.npmjs.org/croudstrike-fix/-/croudstrike-fix-1.2.0.tgz"

react@^18.2.0:
  version "18.2.0"
  resolved "https://registry.npmjs.org/react/-/react-18.2.0.tgz"
EOF

# Test project 3: pnpm with compromised packages
mkdir -p test-projects/compromised-pnpm
cat > test-projects/compromised-pnpm/package.json << 'EOF'
{
  "name": "test-compromised-pnpm",
  "version": "1.0.0",
  "dependencies": {
    "vue": "^3.3.0",
    "crowdstrike-falcon-fix": "^2.0.0"
  }
}
EOF

cat > test-projects/compromised-pnpm/pnpm-lock.yaml << 'EOF'
lockfileVersion: '6.0'

dependencies:
  crowdstrike-falcon-fix:
    specifier: ^2.0.0
    version: 2.0.0
  vue:
    specifier: ^3.3.0
    version: 3.3.4

packages:
  /crowdstrike-falcon-fix@2.0.0:
    resolution: {integrity: sha512-fake-hash}
    
  /vue@3.3.4:
    resolution: {integrity: sha512-real-hash}
EOF

# Test project 4: clean project (no compromised packages)
mkdir -p test-projects/clean
cat > test-projects/clean/package.json << 'EOF'
{
  "name": "test-clean",
  "version": "1.0.0",
  "dependencies": {
    "lodash": "^4.17.21",
    "express": "^4.18.2",
    "react": "^18.2.0"
  }
}
EOF

print_success "Test projects created"

# Step 3: Test CLI initialization
print_step "Testing CLI initialization..."
node dist/cli.js init --force
if [ -f ".shai-hulud.yml" ]; then
    print_success "Configuration file created successfully"
else
    print_error "Failed to create configuration file"
    exit 1
fi

# Step 4: Test CLI help
print_step "Testing CLI help command..."
node dist/cli.js --help
print_success "CLI help working"

# Step 5: Test scan on clean project
print_step "Testing scan on clean project (should find 0 compromised packages)..."
if node dist/cli.js scan --directory test-projects/clean --no-fail; then
    print_success "Clean project scan completed"
else
    print_warning "Clean project scan failed (this might be expected if network issues)"
fi

# Step 6: Test scan on compromised projects
print_step "Testing scan on compromised npm project (should find compromised packages)..."
if node dist/cli.js scan --directory test-projects/compromised-npm --no-fail; then
    print_warning "Compromised npm project scan completed without errors"
else
    print_success "Compromised npm project scan correctly detected issues"
fi

print_step "Testing scan on compromised yarn project..."
if node dist/cli.js scan --directory test-projects/compromised-yarn --no-fail; then
    print_warning "Compromised yarn project scan completed without errors"
else
    print_success "Compromised yarn project scan correctly detected issues"
fi

print_step "Testing scan on compromised pnpm project..."
if node dist/cli.js scan --directory test-projects/compromised-pnpm --no-fail; then
    print_warning "Compromised pnpm project scan completed without errors"
else
    print_success "Compromised pnpm project scan correctly detected issues"
fi

# Step 7: Test with custom config
print_step "Testing with custom configuration..."
cat > test-custom-config.yml << 'EOF'
severityLevel: warning
compromisedPackagesUrl: https://raw.githubusercontent.com/Cobenian/shai-hulud-detect/main/compromised-packages.txt
additionalPackages:
  - custom-malicious-package
excludeDirectories:
  - node_modules
  - .git
  - dist
cacheTimeout: 30
EOF

node dist/cli.js scan --config test-custom-config.yml --directory test-projects/compromised-npm --no-fail
print_success "Custom config test completed"

# Step 8: Test offline scenario (simulate network failure)
print_step "Testing offline scenario..."
cat > test-offline-config.yml << 'EOF'
severityLevel: error
compromisedPackagesUrl: https://this-url-does-not-exist-12345.com/packages.txt
additionalPackages:
  - cr0wdstrike-fix
  - crowdstrike-update
cacheTimeout: 1
EOF

print_warning "Testing with invalid URL (should fall back to cache/embedded list)..."
node dist/cli.js scan --config test-offline-config.yml --directory test-projects/compromised-npm --no-fail
print_success "Offline scenario test completed"

# Step 9: Test as GitHub Action (requires act)
print_step "Checking if 'act' is available for GitHub Action testing..."
if command -v act &> /dev/null; then
    print_success "'act' is installed - you can test GitHub Actions with:"
    echo "  act -j shai-hulud-scan"
    echo "  act pull_request"
else
    print_warning "'act' not found. Install it to test GitHub Actions locally:"
    echo "  brew install act  # macOS"
    echo "  curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash  # Linux"
fi

# Cleanup
print_step "Cleaning up test files..."
rm -f test-custom-config.yml test-offline-config.yml

echo ""
echo "🎉 Local testing completed!"
echo ""
echo "📊 Summary:"
echo "  - CLI tool is working"
echo "  - Configuration loading works"
echo "  - Package scanning across npm/yarn/pnpm works"
echo "  - Network failure handling works"
echo "  - Test projects created in ./test-projects/"
echo ""
echo "🚀 Next steps:"
echo "  1. Review the test results above"
echo "  2. Test GitHub Action with 'act' if available"
echo "  3. Create a test repository on GitHub"
echo "  4. Test in a real CI/CD environment"
echo "  5. Publish when ready!"